Using /dev/urandom, I generate a 10,000,000 bytes file random.txt with 
content consisting of random alpha and numbers
</dev/urandom tr -dc '0-9A-Za-z' | head -c10000000>random.txt

I build executable files for tr2b.c and tr2u.c
gcc -o tr2b tr2b.c
gcc -o tr2u tr2u.c

And then I change the mode of the executable so that I can execute them
chmod 644 tr2b
chmod 644 tr2u

*** a.Copy one file to another ***

1.tr2b

strace -c ./tr2b "abcdefg" "ABCDEFG"<random.txt>out_tr2b.txt
The result is:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.21    0.000708           1      1221           write
 32.62    0.000426           0      1223           read
  4.06    0.000053           6         9           mmap
  2.45    0.000032           8         4           mprotect
  2.22    0.000029           7         4           fstat
  1.30    0.000017           9         2           open
  0.92    0.000012          12         1           munmap
  0.54    0.000007           4         2           close
  0.54    0.000007           7         1         1 access
  0.54    0.000007           7         1           execve
  0.31    0.000004           4         1           brk
  0.31    0.000004           4         1           arch_prctlc
------ ----------- ----------- --------- --------- ----------------
100.00    0.001306                  2470         1 total

2. tr2u
strace -c ./tr2u "abcdefg" "ABCDEFG"<random.txt>out_tr2u.txt

The result is:
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 54.97   41.403997           4  10000001           write
 45.03   33.917676           3  10000002           read
  0.00    0.000020           5         4           mprotect
  0.00    0.000012          12         1           munmap
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         7           mmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   75.321705              20000025         1 total


	   Copying one file to another	 	 Copying to terminal
tr2b	   2470 system calls     		 32 system calls
tr2u	   20000025 system calls		 10485793 system calls


Observing the result, I found that there are way more system calls in tr2u than
tr2b because read and write are system calls. They slow the function


* time

I use time command to get the runtime of program:
time ./tr2b "abcdefg" "ABCDEFG"<random.txt>out2_tr2b.txt
time ./tr2u "abcdefg" "ABCDEFG"<random.txt>out2_tr2u.txt

For tr2b, the result is
real	0m0.848s
user	0m0.627s
sys	0m0.075s

For tr2u, the result is
real	0m22.440s
user	0m2.750s
sys	0m19.601s

*** b.Copy one file to terminal ***
Use commands:

1. tr2b

strace -c ./tr2b "abcdefg" "ABCDEFG"<random.txt

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 92.43    0.021775           2      9766           write
  6.90    0.001625           1      1223           read
  0.22    0.000053           6         9           mmap
  0.13    0.000031           8         4           mprotect
  0.08    0.000018           5         4           fstat
  0.07    0.000016           8         2           open
  0.05    0.000012          12         1           munmap
  0.04    0.000009           9         1           brk
  0.03    0.000008           8         1         1 access
  0.03    0.000007           4         2           close
  0.02    0.000004           4         1           arch_prctl
  0.00    0.000000           0         1           execve
------ ----------- ----------- --------- --------- ----------------
100.00    0.023558                 11015         1 total

2. tr2u
strace -c ./tr2u "abcdefg" "ABCDEFG"<random.txt

Result for tr2u
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.86   48.550392           5  10000001           write
 42.14   35.361875           4  10000002           read
  0.00    0.000023           6         4           mprotect
  0.00    0.000012          12         1           munmap
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         7           mmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00   83.912302              20000025         1 total

           Copying one file to another           Copying to terminal
tr2b       2470 system calls                     11015 system calls
tr2u       20000025 system calls                 20000025 system calls

* time

I use time command to get the runtime of program:
time ./tr2b "abcdefg" "ABCDEFG"<random.txt
time ./tr2u "abcdefg" "ABCDEFG"<random.txt

For tr2b, the result is
real	0m0.845s
user	0m0.620s
sys	0m0.077s

For tr2u, the result is
real	0m18.537s
user	0m2.852s
sys	0m15.663s

************* Conclusion *************
getchar() and putchar() are much more efficient than using system calls, since
they adopt buffered I/O, thus using less system calls and less runtime

****************************************************************************

****************************************************************************

Before testing the functions,
I generate two files that contains different numebers of lines as input:
input1.txt, with size 1,000,000 bytes
input2.txt, with size 5,000,000 bytes

The command I used was
base64 /dev/urandom | head -c 1000000 > input2.txt

############## Comparing performances on different file sizes ##############
The following "time" command is used to return info of runtime
time ./sfrob<input1.txt>output1.txt

*** sfrob ***
input1.txt			`
real	0m0.249s
user	0m0.237s
sys	0m0.010s

input2.txt
real	0m0.053s
user	0m0.047s
sys	0m0.004s

*** sfrobu ***
input1.txt
real	0m11.471s
user	0m1.347s
sys	0m10.078s

input2.txt
real	0m2.195s
user	0m0.305s
sys	0m1.879s

*** Conclusion ***
sfrob is much faster than sfrobu since it uses less system calls

############## Comparing the five programs ##############
I make the comparision across different programs' performance
on processing a large file with size of 5,000,000 bytes

*** sfrob ***
real    0m0.249s
user    0m0.237s
sys     0m0.010s

*** sfrobu ***
real    0m11.471s
user    0m1.347s
sys     0m10.078s

*** sfrobu -f ***
real	0m11.550s
user	0m1.377s
sys	0m10.115s

*** sfrobs ***
real	   0m0.075s
user	   0m0.012s
sys	   0m0.028s

*** sfrobs -f ***
real	   0m0.077s
user	   0m0.014s
sys	   0m0.025s

Then I make the comparision across different programs' performance
on processing a small file with size of 1,000,000 bytes

*** sfrob ***
real    0m0.053s
user    0m0.047s
sys     0m0.004s

*** sfrobu ***
real    0m2.195s
user    0m0.305s
sys     0m1.879s

*** sfrobu -f ***
real	   0m2.224s
user	   0m0.287s
sys	   0m1.923s

*** sfrobs ***
real       0m0.023s
user       0m0.007s
sys        0m0.008s

*** sfrobs -f ***
real	   0m0.024s
user	   0m0.007s
sys	   0m0.007s

############## Conclusion ##############
For processing a large file, the speed ranking is
sfrobs
sfrobs -f
sfrob
sfrobu
sfrobu -f
