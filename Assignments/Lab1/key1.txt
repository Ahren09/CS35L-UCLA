Exercise 1.1
1.e m a c s SP e x e r 1 . h t m l Enter
2.C-s H T M L Enter
3.C-s s c a v e n g e r Enter
4.C-s s e l f - r e f Enter
5.C-s a r r o w Enter
6.C-e
7.C-a
10.C-x C-c

Exercise 1.2
1.e m a c s SP e x e r 2 . h t m l Enter
2.M-x g o t o - l Tab Enter 18 Enter
3.C-s D E L E C-a C-k
4.C-s h t t p s : / / e n Enter M-b M-b C-@ C-e M-b M-b C-b C-b Backspace
5.C-s < ! M-a C-@ M-e M-e Backspace
  C-s < ! C-b C-b C-@ M-f C-b C-b C-b C-b Backspace
  C-n C-a C-@ C-e Backspace
  C-x C-c

Exercise 1.3
1.e m a c s SP e x e r 3 . h t m l Enter
2.C-s A M-f M-f Backspace 42
  C-s A M-f M-f Backspace 42
3.C-s U T F M-b M-@ Backspace U S - A S C I I
4.M-x q u e Tab SP r Tab Enter [ ^ [ : a s c i i : ] ] Enter Enter ! Enter
5.c-s </ol> C-e Enter Enter
6.C-x C-c

Exercise 1.4
1.c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP
 >e x e r 4 . h t m l Enter

2.e m a c s SP e x e r 4 . h t m l Enter

3.
M-> C-s < ! C-b C-@ M-e M-e M-e M-e M-w M-g g 2 0 Enter C-y
C-s < ! C-s C-e C-@ C-a C-f M-w M-g g 1 2 7 Enter C-y 
C-s - < - Enter C-b C-@ M-e C-e M-w C-s s h o u l d o u t Enter C-n C-y
M-g g 3 9 5 C-f C-SP C-e M-w
M-g g 1 1 4 C-y
M-g g 3 8 6 C-f C-SP C-e M-w
M-g g 1 8 C-y

5.M-> C-@ M-V M-V M-V C-n Backspace

6.C-_

7.< ! - - M-> - - >

8.
I found 7 instances
M-% < o l > Enter < / o l > Enter !

9.d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f Enter

Exercise 1.5
1.M-x m a k e SP d Tab Enter j u n k Enter
2.C-x C-f j u n k / h e l l o . c Enter
  Copy and Paste the file
  C-x C-s
3.M-x c o m p i l e 
  C-a C-k g c c SP - o SP h e l l o - o u t SP h e l l o . c Enter
4.M-! . / h e l l o - o u t Enter
5.M-< C-@ M-> M-w C-x C-f Backspace k e y 1 . t x t Enter M-> C-y

#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6
1.
C-x b Enter

2.
( r a n d o m ) C-j

3.
( s e t q SP x SP ( r a n d o m ) ) C-j Enter
( s e t q SP y SP ( r a n d o m ) ) C-j Enter

4.
( * SP x SP y ) C-j
My x is 1173207349929979419
My y is 703634429747448531
The result evaluated is -403340185988805055, which is not correct

5.
M-: ( * SP x SP y ) Enter
The output is the same, but some hexadecimal values follow:
-403340185988805055 (#o351470303634237647101, #x3a670c3ce27f4e41)

6.
The two random integers are not truly random, because they are generated through an enormous pool based on various argument, such as the entropy pool of the system. Also the random number must be between a minimum and a maximum value 

7.Suppose a machine can only represent numbers between -1024 and 1023
The maximum value of x*y is 1023(approximately 1024)
According to symmetricity, the area of possibility of generating the CORRECT PRODUCT is calculated by adding together the integral of 1/x over x=1 and x=1024 and 1*1024, which is (1024+10*ln2)
The area of possibility that represents all possible values of x and y is calculated by 1024*1024
So the possibility of generating INCORRECT PRODUCT is 1-(1024+10*ln2)/(1024^2), which is approximately 1
This possibility will be even larger on machines being able to generate bigger numbers (eg. 8-byte long integers)
